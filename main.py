import streamlit as st
import google.generativeai as genai
import os
import pandas as pd
from dotenv import load_dotenv
from PIL import Image
from tabulate import tabulate

# Configura√ß√£o inicial
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-flash")

# Prompt otimizado
SYSTEM_PROMPT = """
Voc√™ √© um especialista em banco de dados. Forne√ßa:
1. Respostas diretas e t√©cnicas
2. Exemplos apenas quando essenciais
3. Formato conciso (m√°ximo 3 par√°grafos)
4. Destaque pontos-chave em negrito quando relevante

Regras:
- Priorize clareza sobre detalhes extensos
- Use marcadores para listas t√©cnicas
- Limite exemplos de c√≥digo a 3-5 linhas
- Responda estritamente ao questionado
"""

# Sugest√µes r√°pidas
QUICK_SUGGESTIONS = {
    "üõ†Ô∏è SQL & Consultas": [
        ("Otimizar Query", "Como melhorar performance de uma query complexa com m√∫ltiplos JOINs?"),
        ("Subconsultas vs JOINs", "Quando usar subconsultas versus JOINs em SQL?"),
        ("Window Functions", "D√™ exemplos pr√°ticos de uso de window functions em an√°lise de dados"),
        ("CTEs Recursivas", "Como implementar consultas recursivas usando Common Table Expressions?")
    ],
    "üìä Modelagem de Dados": [
        ("Normaliza√ß√£o", "Explique os n√≠veis de normaliza√ß√£o com exemplos pr√°ticos"),
        ("Chaves Prim√°rias", "Como escolher entre UUID, serial ou identity para chaves prim√°rias?"),
        ("Modelo Dimensional", "Quais as vantagens do modelo estrela para data warehouses?"),
        ("Particionamento", "Quando e como particionar tabelas em um banco de dados?")
    ],
    "‚öôÔ∏è Administra√ß√£o": [
        ("Backup Eficiente", "Qual estrat√©gia de backup implementar para um BD de 1TB?"),
        ("Monitoramento", "Quais m√©tricas monitorar para garantir sa√∫de do banco de dados?"),
        ("Escalabilidade", "Como planejar escalabilidade vertical vs horizontal para PostgreSQL?"),
        ("Tunning", "Quais par√¢metros ajustar no postgresql.conf para melhor performance?")
    ],
    "üîç An√°lise de Dados": [
        ("S√©ries Temporais", "Como analisar padr√µes em dados temporais com SQL?"),
        ("An√°lise Textual", "Quais fun√ß√µes usar para an√°lise de texto em bancos de dados?"),
        ("Geoespacial", "Como trabalhar com dados geoespaciais em PostgreSQL/PostGIS?"),
        ("JSON/NoSQL", "Quando usar campos JSON em bancos relacionais?")
    ],
    "üß© Problemas Comuns": [
        ("Deadlocks", "Como identificar e resolver deadlocks em produ√ß√£o?"),
        ("Bloqueios", "Estrat√©gias para reduzir blocking em ambientes concorrentes"),
        ("Vazamento Mem√≥ria", "Como diagnosticar e resolver vazamentos de mem√≥ria no BD?"),
        ("Crescimento Tabelas", "O que fazer quando tabelas de log crescem descontroladamente?")
    ],
    "üîÑ Migra√ß√£o & ETL": [
        ("Migra√ß√£o Schema", "Planejamento para migrar schema entre vers√µes sem downtime"),
        ("ETL vs ELT", "Quando usar abordagem ETL versus ELT em pipelines de dados?"),
        ("CDC", "Como implementar Change Data Capture para sincroniza√ß√£o de dados?"),
        ("Data Quality", "Quais checks implementar para garantir qualidade em processos ETL?")
    ]
}

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="EMS Database Assistant", page_icon="üóÉÔ∏è", layout="wide")
st.title("üóÉÔ∏è EMS Database Assistant")

# Sidebar
with st.sidebar:
    st.header("üí° Sugest√µes T√©cnicas")
    for category, suggestions in QUICK_SUGGESTIONS.items():
        with st.expander(category, expanded=True):
            for label, suggestion in suggestions:
                if st.button(label, key=f"sug_{category}_{label}", help=suggestion, use_container_width=True):
                    st.session_state.suggestion_clicked = suggestion
                    st.rerun()

# Container fixo no topo
with st.container():
    with st.expander("üì§ Enviar dados para an√°lise", expanded=True):
        col1, col2 = st.columns([3, 1])
        with col1:
            uploaded_file = st.file_uploader(
                "Selecione um arquivo ou imagem de schema", 
                type=["png", "jpg", "jpeg", "csv", "xlsx", "xls", "sql", "dump"],
                label_visibility="collapsed"
            )
        with col2:
            st.markdown("<div style='height: 28px'></div>", unsafe_allow_html=True)
            if st.button("Limpar conversa", type="secondary"):
                st.session_state.chat_history = []
                st.rerun()

# Estado da sess√£o
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "suggestion_clicked" not in st.session_state:
    st.session_state.suggestion_clicked = None

# Chat container
chat_container = st.container()

# Campo de entrada
current_placeholder = "Sua pergunta sobre banco de dados..."
if st.session_state.suggestion_clicked:
    current_placeholder = st.session_state.suggestion_clicked

user_input = st.chat_input(current_placeholder)

# Processar sugest√£o clicada
if st.session_state.suggestion_clicked and not user_input:
    user_input = st.session_state.suggestion_clicked
    st.session_state.suggestion_clicked = None

# Processamento principal
if user_input:
    # Processar arquivo enviado
    if uploaded_file:
        try:
            if uploaded_file.type.startswith("image"):
                image = Image.open(uploaded_file)
                st.session_state.chat_history.append({"role": "user", "type": "text", "content": "Analise este diagrama de banco de dados:"})
                st.session_state.chat_history.append({"role": "user", "type": "image", "content": image})

            elif uploaded_file.name.endswith(".csv"):
                df = pd.read_csv(uploaded_file, sep=None, engine="python", on_bad_lines="skip")
                preview = tabulate(df.head(10), headers="keys", tablefmt="github", showindex=False)
                st.session_state.chat_history.append({
                    "role": "user",
                    "type": "text",
                    "content": f"Analise este arquivo CSV chamado **{uploaded_file.name}**. Aqui est√£o as 10 primeiras linhas:\n\n```\n{preview}\n```"
                })

            elif uploaded_file.name.endswith((".xlsx", ".xls")):
                df = pd.read_excel(uploaded_file)
                preview = tabulate(df.head(10), headers="keys", tablefmt="github", showindex=False)
                st.session_state.chat_history.append({
                    "role": "user",
                    "type": "text",
                    "content": f"Analise este arquivo Excel chamado **{uploaded_file.name}**. Aqui est√£o as 10 primeiras linhas:\n\n```\n{preview}\n```"
                })

            else:
                st.session_state.chat_history.append({
                    "role": "user",
                    "type": "text",
                    "content": f"Analise este arquivo {uploaded_file.type}: {uploaded_file.name}"
                })
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")
            st.session_state.chat_history.append({
                "role": "user",
                "type": "text",
                "content": f"‚ö†Ô∏è Erro ao processar arquivo: {str(e)}"
            })

    # Processar input de texto
    st.session_state.chat_history.append({"role": "user", "type": "text", "content": user_input})

    # Gerar resposta
    with st.spinner("Processando sua consulta..."):
        try:
            messages = [{"role": "user", "parts": [SYSTEM_PROMPT]}]
            for item in st.session_state.chat_history:
                if item["type"] == "text":
                    messages.append({"role": item["role"], "parts": [item["content"]]})
                else:
                    messages.append({"role": item["role"], "parts": [item["content"]]})

            response = model.generate_content(
                messages,
                generation_config=genai.types.GenerationConfig(
                    max_output_tokens=500,
                    temperature=0.3,
                    top_p=0.7,
                    top_k=40
                )
            )

            st.session_state.chat_history.append({
                "role": "assistant",
                "type": "text",
                "content": response.text
            })
        except Exception as e:
            st.error("Erro ao processar sua solicita√ß√£o")
            st.session_state.chat_history.append({
                "role": "assistant",
                "type": "text",
                "content": f"üîç Erro: {str(e)}. Por favor, reformule sua pergunta."
            })

    st.rerun()

# Exibir hist√≥rico
with chat_container:
    for i, item in enumerate(st.session_state.chat_history):
        if item["type"] == "text":
            with st.chat_message(item["role"]):
                st.write(item["content"])
                if item["role"] == "assistant" and i == len(st.session_state.chat_history) - 1:
                    cols = st.columns(4)
                    with cols[0]:
                        if st.button("üìã Copiar", key=f"copy_{i}"):
                            st.session_state.copied_text = item["content"]
                    with cols[1]:
                        if st.button("üîç Detalhar", key=f"detail_{i}"):
                            st.session_state.suggestion_clicked = f"Explique em mais detalhes: {item['content'][:50]}..."
                            st.rerun()
                    with cols[2]:
                        if st.button("üîÑ Reformular", key=f"rephrase_{i}"):
                            st.session_state.suggestion_clicked = f"Reformule esta resposta para um p√∫blico t√©cnico: {item['content'][:50]}..."
                            st.rerun()
                    with cols[3]:
                        if st.button("‚úèÔ∏è Exemplo SQL", key=f"example_{i}"):
                            st.session_state.suggestion_clicked = f"Mostre um exemplo pr√°tico em SQL para ilustrar: {item['content'][:50]}..."
                            st.rerun()
        elif item["type"] == "image":
            st.image(item["content"], caption="Diagrama enviado", use_column_width=True)
